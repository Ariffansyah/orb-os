---
name: Build Custom Image
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_NAME: "${{ github.event.repository.name }}"  # the name of the image produced by this build, matches repo names
  IMAGE_DESC: "My Customized Universal Blue Image"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # do not edit
  ARTIFACTHUB_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"  # You should put your own image here so that you get a fancy profile image on https://artifacthub.io/!
  FEDORA_VERSION: "42"
  IS_STABLE_VERSION: "true"  # Set to true if you want to publish the image as stable
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  BASE_IMAGE_NAME: "cosmic-atomic"
  BASE_IMAGE_FLAVOR: "main"
  DEFAULT_TAG: "latest"
  OSTREE_REMOTE_NAME: "ghcr-orb-os"
  OSTREE_REMOTE_URL: "ostree-unverified-registry:ghcr.io/ariffansyah/orb-os:latest"


concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      
      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT
          echo "datenum=$(date -u +%Y%m%d)" >> $GITHUB_OUTPUT

      # Image metadata for https://artifacthub.io/ - This is optional but is highly recommended so we all can get a index of all the custom images
      # The metadata by itself is not going to do anything, you choose if you want your image to be on ArtifactHub or not.
      - name: Image Metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # By default, it should generate "latest" and "latest.(date here)".
          tags: |
            type=raw,value=latest
            type=raw,value=latest.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=latest
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=bootc,ublue,universal-blue
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.ARTIFACTHUB_LOGO_URL }}
            io.artifacthub.package.prerelease=false
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@5a8b0374222a6fffddb1be9516b5fece9483bed0 # v8
        with:
          remove-codeql: true

      # Pulling the main image and rechunking it is necessary to avoid common failures.
      # NOTE: It seems like prepull using wretry does not work along with redhat buildah
      # Need to run buildah using bash if wanna work properly.
      #
      - name: Pull main images
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            # pull the base images used for FROM in Containerfile so
            # we can retry on that unfortunately common failure case
            sudo podman pull ${{ env.PULL_IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ env.BASE_IMAGE_FLAVOR }}:${{ env.FEDORA_VERSION }}

            # Add rechunk as well to remove this source of failure
            sudo podman pull ghcr.io/hhd-dev/rechunk:v1.1.2

      - name: Get source versions
        id: labels
        uses: Wandalen/wretry.action@v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            skopeo inspect docker://${{ env.PULL_IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ env.BASE_IMAGE_FLAVOR }}:${{ env.FEDORA_VERSION }} > source.json
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "SOURCE_IMAGE_VERSION=$ver" >> $GITHUB_ENV

      # Generate a primary version key that appears
      # in rpm-ostree status, and github.
      - name: Generate Version
        id: generate-version
        shell: bash
        run: |
          # Generate the primary version key that will be stored on os-release,
          # shown on the bootloader, and used for the image tag.
          UPSTREAM_TAG="${{ env.SOURCE_IMAGE_VERSION }}"
          # Remove .0 suffix from upstream tag so we can add our own and
          # the wrong one does not end up in the image.
          UPSTREAM_TAG="${UPSTREAM_TAG%.*}"
          FEDORA_VERSION="${{ env.FEDORA_VERSION }}"
          SHA_SHORT="${GITHUB_SHA::7}"

          if [ -n "${{ github.event.pull_request.number }}" ]; then
            VERSION="pr-${FEDORA_VERSION}-${{ github.event.pull_request.number }}"
            PRETTY_VERSION="PR (${{ github.event.pull_request.number }}, ${UPSTREAM_TAG})"
          elif [[ ${{ github.ref_name }} == "unstable" ]]; then
            VERSION="unstable-${UPSTREAM_TAG}"
            PRETTY_VERSION="Unstable (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          elif [[ ${{ github.ref_name }} == "testing" ]]; then
            VERSION="testing-${UPSTREAM_TAG}"
            PRETTY_VERSION="Testing (F${UPSTREAM_TAG}, #${SHA_SHORT})"
          else
            VERSION="${UPSTREAM_TAG}"
            PRETTY_VERSION="Stable (F${UPSTREAM_TAG})"
          fi
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          echo "pretty=${PRETTY_VERSION}" >> $GITHUB_OUTPUT

          echo "Generated the following:"
          cat $GITHUB_OUTPUT

      - name: Define extra environment variables
        run: |
          echo "CONTAINER_TARGET=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "SHA_HEAD_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "FEDORA_MAJOR_VERSION=${{ env.FEDORA_VERSION }}" >> $GITHUB_ENV
          echo "VERSION_TAG=${{ steps.generate-version.outputs.tag }}" >> $GITHUB_ENV
          echo "VERSION_PRETTY=${{ steps.generate-version.outputs.pretty }}" >> $GITHUB_ENV

      # Build the image
      - name: Build Image
        id: build_image
        run: |
          # Build the main image
          sudo buildah build \
          --build-arg IMAGE_NAME=${{ env.IMAGE_NAME }} \
          --build-arg IMAGE_FLAVOR=${{ env.IMAGE_FLAVOR }} \
          --build-arg IMAGE_VENDOR=${{ github.repository_owner }} \
          --build-arg BASE_IMAGE_NAME=${{ env.BASE_IMAGE_NAME }} \
          --build-arg BASE_IMAGE_FLAVOR=${{ env.BASE_IMAGE_FLAVOR }} \
          --build-arg FEDORA_VERSION=${{ env.FEDORA_MAJOR_VERSION }} \
          --build-arg IMAGE_BRANCH=${{ github.ref_name }} \
          --build-arg SHA_HEAD_SHORT=${{ env.SHA_HEAD_SHORT }} \
          --build-arg VERSION_TAG=${{ steps.generate-version.outputs.tag }} \
          --build-arg VERSION_PRETTY="${{ steps.generate-version.outputs.pretty }}" \
          --build-arg OSTREE_REMOTE_NAME=${{ env.OSTREE_REMOTE_NAME }} \
          --build-arg OSTREE_REMOTE_URL=${{ env.OSTREE_REMOTE_URL }} \
          --tag ${{ env.IMAGE_NAME }}:latest .

      # Deleting unused images after build
      - name: Remove auxiliary images
        # We are tight on space, need at least 2x for OSTree
        run: |
          sudo podman image rm ${{ env.PULL_IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ env.BASE_IMAGE_FLAVOR }}:${{ env.FEDORA_VERSION }}

      # We're using certs from Universal Blue's repo to check the kernel signature.
      # https://github.com/ublue-os/kernel-cache
      #
      - name: Check Secureboot
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi
          TMP=$(sudo podman create ${{ env.IMAGE_NAME }}:latest bash)
          
          # First check if kernel exists and find its location
          KERNEL_PATH=$(sudo podman exec $TMP find /usr/lib/modules -name "vmlinuz" 2>/dev/null || echo "")
          
          if [ -z "$KERNEL_PATH" ]; then
            # If not found directly, list modules and try to get the kernel version
            MODULES_DIR=$(sudo podman exec $TMP ls -la /usr/lib/modules/ || echo "")
            echo "Modules directory contents: $MODULES_DIR"
            
            # Try to find kernel in boot directory
            KERNEL_PATH=$(sudo podman exec $TMP find /boot -name "vmlinuz*" 2>/dev/null || echo "")
            
            if [ -z "$KERNEL_PATH" ]; then
              echo "No kernel found. Skipping Secureboot verification."
              sudo podman rm $TMP
              exit 0
            fi
          fi
          
          echo "Found kernel at: $KERNEL_PATH"
          sudo podman cp $TMP:$KERNEL_PATH ./vmlinuz
          sudo podman rm $TMP
          sudo chmod 666 vmlinuz # might not be needed
          
          sbverify --list vmlinuz || echo "No signature found in kernel, continuing anyway"
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          
          # Try verification but don't fail build if it doesn't work
          sbverify --cert kernel-sign.crt vmlinuz || echo "Verification with first cert failed"
          sbverify --cert akmods.crt vmlinuz || echo "Verification with second cert failed"

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Lowercase Owner
        id: owner_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ github.repository_owner }}

      - name: Lowercase Image
        id: image_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_NAME }}

      # Login to the registry before rechunk
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin

      # Skip rechunk and push the original image
      # This is a simpler approach that should work reliably
      - name: Push Original Image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          echo "Pushing original image with multiple tags"
          
          # Push with different tags
          REGISTRY_PATH="${{ steps.registry_case.outputs.lowercase }}/${{ steps.owner_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}"
          
          # Tag and push latest
          sudo podman tag ${{ env.IMAGE_NAME }}:latest $REGISTRY_PATH:latest
          sudo podman push $REGISTRY_PATH:latest
          echo "Pushed $REGISTRY_PATH:latest"
          
          # Tag and push date-based tags
          sudo podman tag ${{ env.IMAGE_NAME }}:latest $REGISTRY_PATH:latest.${{ steps.date.outputs.datenum }}
          sudo podman push $REGISTRY_PATH:latest.${{ steps.date.outputs.datenum }}
          echo "Pushed $REGISTRY_PATH:latest.${{ steps.date.outputs.datenum }}"
          
          sudo podman tag ${{ env.IMAGE_NAME }}:latest $REGISTRY_PATH:${{ steps.date.outputs.datenum }}
          sudo podman push $REGISTRY_PATH:${{ steps.date.outputs.datenum }}
          echo "Pushed $REGISTRY_PATH:${{ steps.date.outputs.datenum }}"

      - name: Generate OSTree Remote Configuration
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          cat > ostree-remote.conf << EOF
          [remote "${{ env.OSTREE_REMOTE_NAME }}"]
          url=${{ env.OSTREE_REMOTE_URL }}
          gpg-verify=false
          EOF
          
          echo "Generated OSTree remote configuration:"
          cat ostree-remote.conf

      # This section is optional and only needs to be enabled if you plan on distributing
      # your project for others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.
      - name: Install Cosign
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${{ steps.image_case.outputs.lowercase }}"
          for tag in latest latest.${{ steps.date.outputs.datenum }} ${{ steps.date.outputs.datenum }}; do
            cosign sign -y --key env://COSIGN_PRIVATE_KEY $IMAGE_FULL:$tag || echo "Failed to sign $tag, continuing..."
          done
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
